@f = dso_local global i32 55, align 4

define dso_local i32 @myFunction(i32 %f) #0 {
entry:
  %f.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %f, i32* %f.addr, align 4
  store i32 8, i32* %y, align 4
  store i32 100, i32* %c, align 4
  %0 = load i32, i32* %y, align 4
  store i32 %0, i32* %x, align 4
  %1 = load i32, i32* %f.addr, align 4
  store i32 %1, i32* %y, align 4
  %2 = load i32, i32* %c, align 4
  %3 = load i32, i32* %x, align 4
  %4 = load i32, i32* %y, align 4
  %add = add nsw i32 %3, %4
  %mul = mul nsw i32 %2, %add
  %rem = srem i32 %mul, 62
  store i32 %rem, i32* %f.addr, align 4
  %5 = load i32, i32* %f.addr, align 4
  ret i32 %5
}

define dso_local i32 @main() #0 {
entry:
  %tmpf = load i32, i32* @f, align 4
  %add = add nsw i32 %tmpf, 5
  %call = call i32 @myFunction(i32 %add)
  store i32 %call, i32* @f, align 4
  %tmpf = load i32, i32* @f, align 4
  ret i32 %tmpf
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 2}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.0"}
