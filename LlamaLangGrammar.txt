# LLAMA LANGUAGE GRAMMAR

sourceFile
    : (functionProto | functionDef | varDef eos)* eos
    ;

basicDirective
    : '#' IDENTIFIER (IDENTIFIER | string_)?
    ;

// Function declarations
functionDef
    : functionProto block
    ;

functionProto
    : 'fn' IDENTIFIER '(' parameterList? ')' type_
    ;

parameterList
    : parameterDecl (',' parameterDecl)*
    ;

type_
    : '*' type_
    | '[' ']' type_
    | IDENTIFIER
    ;

varDef
    : IDENTIFIER type_ ('=' expression)?
    ;

parameterDecl
    : IDENTIFIER type_
    ;

block
    : '{' statementList? '}'
    ;

statement
    : varDef
    | expression
    | assignmentStmnt
    | returnStmt
    | block
    | emptyStmt
    ;

statementList
    : (statement eos)+
    ;

assign_op
    : ('+' | '-' | '|' | '^' | '*' | '/' | '%' | '<<' | '>>' | '&' | '^')? '='
    ;

assignmentStmnt
    : IDENTIFIER assign_op expression
    ;

emptyStmt
    : ';'
    ;

returnStmt
    : 'ret' expression?
    ;

expression
    : compExpr
    | '(' expression ')'
    ;

compExpr
    : unaryExpr ('=='|'!=') unaryExpr
    | unaryExpr ('>='|'<='|'<'|'>') unaryExpr}
    | unaryExpr
    ;

unaryExpr
    : ('!' | '~' | '--' | '++') algebraicExpr
    | algebraicExpr
    ;

algebraicExpr
    : termExpr ('+' | '-' | '&' | '|') termExpr
    | termExpr
    ;

termExpr
    : primaryExpr ('*' | '/' | '%' | '<<' | '>>' | '&' | '^') primaryExpr
    | primaryExpr
    ;

primaryExpr
    : 
    | callExpr
    | IDENTIFIER
    | INT_LIT
    | FLOAT_LIT
    | STRING
    | UNICODE_CHAR
    ;

expressionList
    :  expression (',' expression)*
    ;

callExpr
    : IDENTIFIER '(' expressionList ')'
    ;

eos
    : ';'
    | '\n'
    | EOF
    ;

// Keywords
HASH                    : '#';
FUNC                    : 'fn';
RETURN                  : 'ret';
IDENTIFIER              : [a-zA-Z_] ([a-zA-Z0-9_])*;

L_PAREN                 : '(';
R_PAREN                 : ')';
L_CURLY                 : '{';
R_CURLY                 : '}';
L_BRACKET               : '[';
R_BRACKET               : ']';
ASSIGN                  : '=';
COMMA                   : ',';
SEMI                    : ';';
COLON                   : ':';
DOT                     : '.';

PLUS_PLUS               : '++';
MINUS_MINUS             : '--';

NOT                     : '!';
OR                      : '||' | 'or';
AND                     : '&&' | 'and';
EQUALS                  : '==';
NOT_EQUALS              : '!=';
LESS                    : '<';
GREATER                 : '>';
LESS_OR_EQUALS          : '<=';
GREATER_OR_EQUALS       : '>=';

PLUS                    : '+';
MINUS                   : '-';
CARET                   : '^';
MUL                     : '*';
DIV                     : '/';
MOD                     : '%';

BIT_OR                  : '|';
BIT_AND                 : '&';
LSHIFT                  : '<<';
RSHIFT                  : '>>';


// Number literals
DECIMAL_LIT             : [0-9]+            [u]? [bwl]?
                        | '0' [o] [0-7]*    [u]? [bwl]?
                        | '0' [x] [0-9A-F]+ [u]? [bwl]?
                        | '0' [b] [01]+     [u]? [bwl]?
                        ;

FLOAT_LIT               : DECIMALS ('.' DECIMALS? EXPONENT? | EXPONENT) [f]?
                        | '.' DECIMALS EXPONENT? [f]?
                        ;

UNICODE_CHAR            : '\'' (~[\n\\] | ESCAPED_VALUE) '\'';

STRING                  : '"' (~["\\] | ESCAPED_VALUE)*  '"';

// Hidden tokens
WS                      : [ \t \r \n ' ']+   -> skip;
COMMENT                 : '/*' .*? '*/'      -> channel(COMMENTS);
LINE_COMMENT            : '//' ~[\n]*        -> skip;

// Fragments
fragment ESCAPED_VALUE
    : '\\' ('u' '{' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT '}'
           | [abfnrtv\\'"]
           | 'x' HEX_DIGIT HEX_DIGIT)
    ;

fragment DECIMALS
    : [0-9]+
    ;

fragment EXPONENT
    : [eE] [+-]? DECIMALS
    ;
